{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\07_React\\\\my-app\\\\src\\\\TodoList\\\\TodoList.js\",\n  _s = $RefreshSig$();\n// TodoList.js\n\nimport { useState } from \"react\";\n\n/*\r\n\r\n    불변성(immutability)을 유지해야함.\r\n    : 데이터 구조(ex. 배열, 객체 등)의 원본값을 변경할 수 없는 성질을 의미함.\r\n    -> 불변성을 유지한다는 것은 한 번 설정된 초기값을 가진 데이터 구조를 직접 변경하지 않고\r\n    항상 새로운 데이터 구조를 생성해서 업데이트하는 것을 뜻함\r\n\r\n    왜? React 는 상태변화가 일어날 때 효율적으로 컴포넌트를 리-렌더링하기 위해 \r\n    상태의 불변성을 가정한다.\r\n\r\n    불변성을 유지하면 이전 상태와 새로운 상태가 다르다는 것을 쉽게 알 수 있으며, 이를 통해서\r\n    변경된 부분만 업데이트 할 수 있는 것.\r\n\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoList() {\n  _s();\n  // 상태\n  const [todos, setTodos] = useState([{\n    title: \"React 복습\",\n    isDone: false\n  }, {\n    title: \"집가서 쉬기\",\n    isDone: true\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  //========================================================================================\n\n  // 함수\n  // 할 일 추가 함수\n  const handleAddTodo = () => {\n    // 기존의 todos 배열과 새로운 할 일 객체를 이어붙여서 새로운 배열을 만든 후,\n    // 이를 setTodos 함수를 사용하여 업데이트함.\n    setTodos([...todos, {\n      title: inputValue,\n      isDone: false\n    }]);\n    // 전개 연산자(...) -> 얕은 복사\n    setInputValue(\"\"); // 입력 필드값 비워주기\n  };\n\n  // 할 일 삭제 함수\n  const handleDeleteTodo = index => {\n    // 얕은 복사 방법 1번째 : slice() 이용 - 원본 배열을 변경하지 않고, 새로운 배열을 반환\n    const newTodos = todos.slice(); // 기존의 todos 배열을 복사하여 새로운 배열을 생성\n\n    newTodos.splice(index, 1);\n    // splice() : 배열의 기존 요소를 삭제(추가 또는 교체)\n    // splice(start, deleteCount, [item1, item2...])\n    // start : 배열에서 변경을 시작할 인덱스\n    // deleteCount : 배열에서 제거할 요소의 수\n    // [item1, item2 ...] : 옵션 배열에 추가할 요소들\n    setTodos(newTodos);\n  };\n\n  // 할 일 토글 함수\n  const handleToggleTodo = index => {\n    // 얕은 복사 방법 2번째 : 전개(spread) 연산자 이용\n    // - 배열이나 객체의 모든 요소를 개별적으로 펼쳐서 새로운 배열이나 객체를 생헝할 때 사용\n    const newTodos = [...todos];\n  };\n\n  //========================================================================================\n  // return() : 화면에 렌더링할 jsx 작성 구문\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputValue,\n      onChange: e => setInputValue(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \"\\uCD94\\uAC00\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map((todo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: todo.isDone ? 'line-through' : 'none'\n          },\n          children: todo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleToggleTodo(index),\n          children: todo.isDone ? '미완료' : '완료'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteTodo(index),\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(TodoList, \"LFmZpYDPKA+DlTv3G2EdA/9Ad2w=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","TodoList","_s","todos","setTodos","title","isDone","inputValue","setInputValue","handleAddTodo","handleDeleteTodo","index","newTodos","slice","splice","handleToggleTodo","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","map","todo","style","textDecoration","_c","$RefreshReg$"],"sources":["C:/workspace/07_React/my-app/src/TodoList/TodoList.js"],"sourcesContent":["// TodoList.js\r\n\r\nimport { useState } from \"react\";\r\n\r\n/*\r\n\r\n    불변성(immutability)을 유지해야함.\r\n    : 데이터 구조(ex. 배열, 객체 등)의 원본값을 변경할 수 없는 성질을 의미함.\r\n    -> 불변성을 유지한다는 것은 한 번 설정된 초기값을 가진 데이터 구조를 직접 변경하지 않고\r\n    항상 새로운 데이터 구조를 생성해서 업데이트하는 것을 뜻함\r\n\r\n    왜? React 는 상태변화가 일어날 때 효율적으로 컴포넌트를 리-렌더링하기 위해 \r\n    상태의 불변성을 가정한다.\r\n\r\n    불변성을 유지하면 이전 상태와 새로운 상태가 다르다는 것을 쉽게 알 수 있으며, 이를 통해서\r\n    변경된 부분만 업데이트 할 수 있는 것.\r\n\r\n*/\r\n\r\n\r\nfunction TodoList() {\r\n\r\n    // 상태\r\n    const [todos, setTodos] = useState([{title : \"React 복습\", isDone : false}, \r\n                                        {title : \"집가서 쉬기\", isDone : true}]);\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    //========================================================================================\r\n\r\n    // 함수\r\n    // 할 일 추가 함수\r\n    const handleAddTodo = () => {\r\n        // 기존의 todos 배열과 새로운 할 일 객체를 이어붙여서 새로운 배열을 만든 후,\r\n        // 이를 setTodos 함수를 사용하여 업데이트함.\r\n        setTodos([ ...todos, {title : inputValue, isDone : false}]);\r\n        // 전개 연산자(...) -> 얕은 복사\r\n        setInputValue(\"\"); // 입력 필드값 비워주기\r\n\r\n    };\r\n\r\n    // 할 일 삭제 함수\r\n    const handleDeleteTodo = (index) => {\r\n        // 얕은 복사 방법 1번째 : slice() 이용 - 원본 배열을 변경하지 않고, 새로운 배열을 반환\r\n        const newTodos = todos.slice();     // 기존의 todos 배열을 복사하여 새로운 배열을 생성\r\n        \r\n        newTodos.splice(index, 1);\r\n        // splice() : 배열의 기존 요소를 삭제(추가 또는 교체)\r\n        // splice(start, deleteCount, [item1, item2...])\r\n        // start : 배열에서 변경을 시작할 인덱스\r\n        // deleteCount : 배열에서 제거할 요소의 수\r\n        // [item1, item2 ...] : 옵션 배열에 추가할 요소들\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    // 할 일 토글 함수\r\n    const handleToggleTodo = (index) => {\r\n        // 얕은 복사 방법 2번째 : 전개(spread) 연산자 이용\r\n        // - 배열이나 객체의 모든 요소를 개별적으로 펼쳐서 새로운 배열이나 객체를 생헝할 때 사용\r\n        const newTodos = [...todos];\r\n\r\n    };\r\n\r\n    //========================================================================================\r\n    // return() : 화면에 렌더링할 jsx 작성 구문\r\n    return (\r\n\r\n        <div>\r\n            <h1>Todo List</h1>\r\n            <input value={inputValue} onChange={(e) => setInputValue(e.target.value)}/>\r\n            <button onClick={handleAddTodo}>추가하기</button>\r\n\r\n            <ul>\r\n                {\r\n                    todos.map((todo, index) => (\r\n\r\n                        <li>\r\n                            <span style={{ textDecoration : todo.isDone ? 'line-through' : 'none' }}>\r\n                                {todo.title}\r\n                            </span>\r\n\r\n                            <button onClick={() => handleToggleTodo(index)}>{todo.isDone ? '미완료' : '완료'}</button>\r\n                            <button onClick={() => handleDeleteTodo(index)}>삭제</button>\r\n                        </li>\r\n\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default TodoList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}