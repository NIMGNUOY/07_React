{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\07_React\\\\my-app\\\\src\\\\exam\\\\Exam6.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// JSX (JavaScript Xml) 사용하기\n\n// 조건문\nfunction Exam6_1(props) {\n  // 함수형 컴포넌트\n\n  const isLogin = props.isLogin; // 부모에게 전달받은 props 중에 isLogin 값을 변수에 담음\n\n  // if(isLogin) {   // true\n  //     return <h1>Welcome back</h1>\n  // } else {        // false\n  //     return <h1>Please sign up</h1>\n  // }\n\n  return (\n    // 렌더링 시 조건문\n    // if / else 문 지양\n    // -> 삼항연산자를 많이 쓴다\n    // 조건문 ? true 일때 값 : false 일 때 값\n    isLogin ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please sign up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 43\n    }, this)\n  );\n}\n_c = Exam6_1;\n;\n\n// map 사용법(반복)\nexport function Exam6_2() {\n  // map() : 배열에서 사용하는 js 내장 함수\n  // -> 배열의 모든 요소에 대해 주어진 함수를 호출하고 결과를 새로운 배열로 반환\n  const numbers = [1, 2, 3, 4, 5];\n  const listItems = numbers.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 48\n  }, this));\n  // [ <li>1</li>, <li>2</li>, <li>3</li>, <li>4</li>, <li>5</li> ]\n  // <li> 태그 안에 각각 1 ~ 5 값이 들어가 있다.\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: listItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 12\n  }, this); // 위에서 만든 listItems 배열을\n  // ul 태그에서 JSX 표현식을 사용하여 렌더링\n}\n_c2 = Exam6_2;\n;\n\n// 이벤트 만들기\nexport function Exam6_3(props) {\n  const handleClick = () => {\n    alert(\"버튼 클릭되었음\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: props.label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_c3 = Exam6_3;\nexport default Exam6_1; // 기본적으로 내보내는 컴포넌트가 Exam6_1 이다\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Exam6_1\");\n$RefreshReg$(_c2, \"Exam6_2\");\n$RefreshReg$(_c3, \"Exam6_3\");","map":{"version":3,"names":["Exam6_1","props","isLogin","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Exam6_2","numbers","listItems","map","number","_c2","Exam6_3","handleClick","alert","onClick","label","_c3","$RefreshReg$"],"sources":["C:/workspace/07_React/my-app/src/exam/Exam6.js"],"sourcesContent":["// JSX (JavaScript Xml) 사용하기\r\n\r\n// 조건문\r\nfunction Exam6_1(props) {    // 함수형 컴포넌트\r\n\r\n    const isLogin = props.isLogin;  // 부모에게 전달받은 props 중에 isLogin 값을 변수에 담음\r\n\r\n    // if(isLogin) {   // true\r\n    //     return <h1>Welcome back</h1>\r\n    // } else {        // false\r\n    //     return <h1>Please sign up</h1>\r\n    // }\r\n\r\n    return (\r\n\r\n        // 렌더링 시 조건문\r\n        // if / else 문 지양\r\n        // -> 삼항연산자를 많이 쓴다\r\n        // 조건문 ? true 일때 값 : false 일 때 값\r\n        isLogin ? <h1>Welcome back</h1> : <h1>Please sign up</h1>\r\n\r\n    );\r\n\r\n};\r\n\r\n\r\n// map 사용법(반복)\r\nexport function Exam6_2() {\r\n    // map() : 배열에서 사용하는 js 내장 함수\r\n    // -> 배열의 모든 요소에 대해 주어진 함수를 호출하고 결과를 새로운 배열로 반환\r\n    const numbers = [1,2,3,4,5];\r\n    const listItems = numbers.map( (number) => <li>{number}</li> );\r\n    // [ <li>1</li>, <li>2</li>, <li>3</li>, <li>4</li>, <li>5</li> ]\r\n    // <li> 태그 안에 각각 1 ~ 5 값이 들어가 있다.\r\n\r\n    return <ul>{listItems}</ul> // 위에서 만든 listItems 배열을\r\n                                // ul 태그에서 JSX 표현식을 사용하여 렌더링\r\n\r\n};\r\n\r\n// 이벤트 만들기\r\nexport function Exam6_3(props) {\r\n\r\n    const handleClick = () => {\r\n        alert(\"버튼 클릭되었음\");\r\n    }\r\n\r\n    return (\r\n\r\n        <button onClick={handleClick}>{props.label}</button>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Exam6_1; // 기본적으로 내보내는 컴포넌트가 Exam6_1 이다"],"mappings":";;AAAA;;AAEA;AACA,SAASA,OAAOA,CAACC,KAAK,EAAE;EAAK;;EAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO,CAAC,CAAE;;EAEhC;EACA;EACA;EACA;EACA;;EAEA;IAEI;IACA;IACA;IACA;IACAA,OAAO,gBAAGC,OAAA;MAAAC,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAAGL,OAAA;MAAAC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;AAIjE;AAACC,EAAA,GApBQT,OAAO;AAoBf;;AAGD;AACA,OAAO,SAASU,OAAOA,CAAA,EAAG;EACtB;EACA;EACA,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;EAC3B,MAAMC,SAAS,GAAGD,OAAO,CAACE,GAAG,CAAGC,MAAM,iBAAKX,OAAA;IAAAC,QAAA,EAAKU;EAAM;IAAAT,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAE,CAAC;EAC9D;EACA;;EAEA,oBAAOL,OAAA;IAAAC,QAAA,EAAKQ;EAAS;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,EAAC;EACA;AAEhC;AAACO,GAAA,GAXeL,OAAO;AAWtB;;AAED;AACA,OAAO,SAASM,OAAOA,CAACf,KAAK,EAAE;EAE3B,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,UAAU,CAAC;EACrB,CAAC;EAED,oBAEIf,OAAA;IAAQgB,OAAO,EAAEF,WAAY;IAAAb,QAAA,EAAEH,KAAK,CAACmB;EAAK;IAAAf,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAI5D;AAACa,GAAA,GAZeL,OAAO;AAevB,eAAehB,OAAO,CAAC,CAAC;AAAA,IAAAS,EAAA,EAAAM,GAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAb,EAAA;AAAAa,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}